{"version":3,"sources":["Button.jsx","BarChart.jsx","BarChartPractice.jsx","BarChartResponsive.jsx","BarChartResp.jsx","Circle.jsx","LineChart.jsx","App.jsx","index.js"],"names":["Button","handleClick","title","onClick","BarChart","svgRef","React","useRef","useState","randArray","data","setData","useEffect","svg","select","current","xScale","scaleBand","domain","map","v","i","range","padding","yScale","scaleLinear","Math","max","colorScale","clamp","xAxis","axisBottom","ticks","length","yAxis","axisLeft","style","call","selectAll","join","attr","value","index","bandwidth","on","event","nodes","indexOf","target","enter","append","text","transition","remove","ref","className","d","filter","randNum","BarChartPractice","myRef","tooltip","setTooltip","BarChartResponsive","wraperRef","dimensions","setDimensions","observeTarget","resizeObserver","ResizeObserver","enteries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","width","height","BarChartResp","CircleChart","LineChart","tickFormat","myLine","line","x","y","curve","curveCardinal","ceil","random","values","push","App","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.42c4a74f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Button = ({ handleClick, title }) => {\r\n  return <button onClick={handleClick}>{title}</button>;\r\n};\r\n\r\nexport default Button;\r\n","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { axisBottom, axisLeft, scaleBand, scaleLinear, select } from \"d3\";\r\nimport { randArray, randNum } from \"./App\";\r\nimport Button from \"./Button\";\r\n\r\nexport default function BarChart() {\r\n  const svgRef = React.useRef();\r\n  const [data, setData] = React.useState(randArray());\r\n  React.useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    const xScale = scaleBand()\r\n      .domain(data.map((v, i) => i)) // need to provide array of value to display in x-axis eg [0,1,2,3,4,5,6]\r\n      .range([0, 300])\r\n      .padding(0.5);\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([0, Math.max(...data) + 20]) //[minVal,maxVal]\r\n      .range([150, 0]);\r\n\r\n    const colorScale = scaleLinear()\r\n      .domain([50, 100, 150]) //domain([0, Math.max(...data) + 10])\r\n      .range([\"green\", \"orange\", \"red\"])\r\n      .clamp(true);\r\n\r\n    const xAxis = axisBottom(xScale).ticks(data.length);\r\n\r\n    const yAxis = axisLeft(yScale);\r\n\r\n    svg.select(\".x-axis\").style(\"transform\", \"translateY(150px)\").call(xAxis);\r\n    svg.select(\".y-axis\").call(yAxis);\r\n\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(data)\r\n      .join(\"rect\")\r\n      .attr(\"class\", \"bar\")\r\n      .style(\"transform\", \"scale(1,-1)\")\r\n      .attr(\"x\", (value, index) => xScale(index))\r\n      .attr(\"y\", -150)\r\n      .attr(\"width\", xScale.bandwidth())\r\n      .on(\"mouseenter\", (event, value) => {\r\n        const index = svg.selectAll(\".bar\").nodes().indexOf(event.target);\r\n\r\n        svg\r\n          .selectAll(\".tooltip\")\r\n          .data([value])\r\n          .join((enter) => enter.append(\"text\").attr(\"y\", yScale(value) - 4))\r\n          .attr(\"class\", \"tooltip\")\r\n          .text(value)\r\n          .attr(\"x\", xScale(index) + xScale.bandwidth() / 2)\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .transition()\r\n          .attr(\"y\", yScale(value) - 8)\r\n          .attr(\"opacity\", 1);\r\n      })\r\n      .on(\"mouseleave\", () => svg.select(\".tooltip\").remove())\r\n      .transition()\r\n      .attr(\"fill\", colorScale)\r\n      .attr(\"height\", (value) => 150 - yScale(value));\r\n  }, [data]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Bar Chart</h1>\r\n      <svg ref={svgRef} className=\"line-chart\">\r\n        <g className=\"x-axis\" />\r\n        <g className=\"y-axis\" />\r\n      </svg>\r\n      <div className=\"btn-grp\">\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d + 5))}\r\n          title=\"+5\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.filter((d) => d > 50))}\r\n          title=\"filter\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d - 5))}\r\n          title=\"-5\"\r\n        />\r\n        <Button handleClick={() => setData([...data, randNum()])} title=\"Add\" />\r\n        <Button handleClick={() => setData(randArray())} title=\"Re-set\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { axisBottom, axisLeft, scaleBand, scaleLinear, select } from \"d3\";\r\nimport { randArray, randNum } from \"./App\";\r\nimport Button from \"./Button\";\r\n\r\nfunction BarChartPractice() {\r\n  const myRef = React.useRef();\r\n  const [data, setData] = React.useState(randArray());\r\n  const [tooltip, setTooltip] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    const svg = select(myRef.current);\r\n\r\n    const xScale = scaleBand()\r\n      .domain(data.map((v, i) => i))\r\n      .range([0, 300])\r\n      .padding(0.5);\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([0, Math.max(...data) + 20]) //[minVal,maxVal]\r\n      .range([150, 0]);\r\n\r\n    const xAxis = axisBottom(xScale);\r\n    const yAxis = axisLeft(yScale);\r\n\r\n    svg.select(\".x-axis\").style(\"transform\", \"translateY(150px)\").call(xAxis);\r\n    svg.select(\".y-axis\").call(yAxis);\r\n\r\n    const addText = () => {\r\n      svg\r\n        .selectAll(\".tooltip\")\r\n        .data(data)\r\n        .join(\"text\")\r\n        .attr(\"class\", \"tooltip\")\r\n        .text((v) => v)\r\n        .attr(\"text-anchor\", \"middle\")\r\n        .attr(\"x\", (value, index) => xScale(index) + xScale.bandwidth() / 2)\r\n        .attr(\"y\", (value, index) => yScale(value) - 5);\r\n      setTooltip(true);\r\n    };\r\n\r\n    // Basic bar Chart\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(data)\r\n      .join(\"rect\")\r\n      .attr(\"class\", \"bar\")\r\n      .style(\"transform\", \"scale(1,-1)\")\r\n      .attr(\"x\", (value, index) => xScale(index))\r\n      .attr(\"y\", -150)\r\n      .attr(\"width\", xScale.bandwidth())\r\n      .transition()\r\n      .attr(\"height\", (value) => 150 - yScale(value));\r\n\r\n    addText();\r\n  }, [data, tooltip, setTooltip]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Basic Bar Chart</h1>\r\n      <svg className=\"line-chart\" ref={myRef}>\r\n        <g className=\"x-axis\" />\r\n        <g className=\"y-axis\" />\r\n      </svg>\r\n      <div className=\"btn-grp\">\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d + 5))}\r\n          title=\"+5\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.filter((d) => d > 50))}\r\n          title=\"filter\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d - 5))}\r\n          title=\"-5\"\r\n        />\r\n        <Button handleClick={() => setData([...data, randNum()])} title=\"Add\" />\r\n        <Button handleClick={() => setData(randArray())} title=\"Re-set\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarChartPractice;\r\n","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport { axisBottom, axisLeft, scaleBand, scaleLinear, select } from \"d3\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\n\r\n// custom hook\r\nconst useResizeObserver = (ref) => {\r\n  const [dimensions, setDimensions] = React.useState(null);\r\n  React.useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver((enteries) => {\r\n      enteries.forEach((entry) => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n\r\n    resizeObserver.observe(observeTarget);\r\n\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n\r\n  return dimensions;\r\n};\r\n\r\nexport default function BarChartResponsive({ data }) {\r\n  const svgRef = React.useRef();\r\n  const wraperRef = React.useRef();\r\n  const dimensions = useResizeObserver(wraperRef);\r\n\r\n  React.useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n\r\n    if (!dimensions) return;\r\n\r\n    const xScale = scaleBand()\r\n      .domain(data.map((v, i) => i)) // need to provide array of value to display in x-axis eg [0,1,2,3,4,5,6]\r\n      .range([0, dimensions.width])\r\n      .padding(0.5);\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([0, Math.max(...data) + 20]) // .domain([0, 150])\r\n      .range([dimensions.height, 0]);\r\n\r\n    const colorScale = scaleLinear()\r\n      .domain([50, 100, 150]) //domain([0, Math.max(...data) + 10])\r\n      .range([\"green\", \"orange\", \"red\"])\r\n      .clamp(true);\r\n\r\n    const xAxis = axisBottom(xScale).ticks(data.length);\r\n\r\n    const yAxis = axisLeft(yScale);\r\n\r\n    svg\r\n      .select(\".x-axis\")\r\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\r\n      .call(xAxis);\r\n    svg.select(\".y-axis\").call(yAxis);\r\n\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(data)\r\n      .join(\"rect\")\r\n      .attr(\"class\", \"bar\")\r\n      .style(\"transform\", \"scale(1,-1)\")\r\n      .attr(\"x\", (value, index) => xScale(index))\r\n      .attr(\"y\", -dimensions.height)\r\n      .attr(\"width\", xScale.bandwidth())\r\n      .on(\"mouseenter\", (event, value) => {\r\n        const index = svg.selectAll(\".bar\").nodes().indexOf(event.target);\r\n\r\n        svg\r\n          .selectAll(\".tooltip\")\r\n          .data([value])\r\n          .join((enter) => enter.append(\"text\").attr(\"y\", yScale(value) - 4))\r\n          .attr(\"class\", \"tooltip\")\r\n          .text(value)\r\n          .attr(\"x\", xScale(index) + xScale.bandwidth() / 2)\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .transition()\r\n          .attr(\"y\", yScale(value) - 8)\r\n          .attr(\"opacity\", 1);\r\n      })\r\n      .on(\"mouseleave\", () => svg.select(\".tooltip\").remove())\r\n      .transition()\r\n      .attr(\"fill\", colorScale)\r\n      .attr(\"height\", (value) => dimensions.height - yScale(value));\r\n  }, [data, dimensions]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Bar Chart Responsive</h1>\r\n      <div ref={wraperRef} className=\"container\">\r\n        <svg ref={svgRef} className=\"line-chart bar-chart\">\r\n          <g className=\"x-axis\" />\r\n          <g className=\"y-axis\" />\r\n        </svg>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { randArray, randNum } from \"./App\";\r\nimport BarChartResponsive from \"./BarChartResponsive\";\r\nimport Button from \"./Button\";\r\n\r\nconst BarChartResp = () => {\r\n  const [data, setData] = React.useState(randArray());\r\n  return (\r\n    <>\r\n      <BarChartResponsive data={data} />\r\n      <div className=\"btn-grp\">\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d + 5))}\r\n          title=\"+5\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.filter((d) => d > 50))}\r\n          title=\"filter\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d - 5))}\r\n          title=\"-5\"\r\n        />\r\n        <Button handleClick={() => setData([...data, randNum()])} title=\"Add\" />\r\n        <Button handleClick={() => setData(randArray())} title=\"Re-set\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BarChartResp;\r\n","import \"./styles.css\";\nimport React from \"react\";\nimport { select } from \"d3\";\nimport Button from \"./Button\";\n\nexport default function CircleChart() {\n  const svgRef = React.useRef();\n  const [data, setData] = React.useState([25, 60, 80, 45, 32, 80]);\n  React.useEffect(() => {\n    const svg = select(svgRef.current);\n    svg\n      .selectAll(\"circle\")\n      .data(data)\n      .join(\"circle\")\n      .attr(\"r\", (value) => value)\n      .attr(\"cx\", (v) => v * 2)\n      .attr(\"cy\", (v) => v * 2)\n      .attr(\"stroke\", \"red\");\n  }, [data]);\n  return (\n    <div>\n      <h1>Circle</h1>\n      <svg ref={svgRef}></svg>\n\n      <div className=\"btn-grp\">\n        <Button\n          handleClick={() => setData(data.map((d) => d + 5))}\n          title=\"+5\"\n        />\n        <Button\n          handleClick={() => setData(data.filter((d) => d > 50))}\n          title=\"filter\"\n        />\n        <Button\n          handleClick={() => setData(data.map((d) => d - 5))}\n          title=\"-5\"\n        />\n      </div>\n    </div>\n  );\n}\n","import \"./styles.css\";\r\nimport React from \"react\";\r\nimport {\r\n  axisBottom,\r\n  axisLeft,\r\n  curveCardinal,\r\n  line,\r\n  scaleLinear,\r\n  select,\r\n} from \"d3\";\r\nimport { randArray, randNum } from \"./App\";\r\nimport Button from \"./Button\";\r\n\r\nexport default function LineChart() {\r\n  const svgRef = React.useRef();\r\n  const [data, setData] = React.useState(randArray());\r\n  React.useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    const xScale = scaleLinear()\r\n      .domain([0, data.length - 1])\r\n      .range([0, 300]);\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([0, Math.max(...data) + 20]) //[minVal,maxVal]\r\n      .range([150, 0]);\r\n\r\n    const xAxis = axisBottom(xScale)\r\n      .ticks(data.length)\r\n      .tickFormat((index) => index + 1);\r\n    const yAxis = axisLeft(yScale);\r\n\r\n    svg.select(\".x-axis\").style(\"transform\", \"translateY(150px)\").call(xAxis);\r\n    svg.select(\".y-axis\").call(yAxis);\r\n\r\n    const myLine = line()\r\n      .x((value, index) => xScale(index))\r\n      .y(yScale)\r\n      .curve(curveCardinal);\r\n\r\n    svg\r\n      .selectAll(\".line\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"class\", \"line\")\r\n      .attr(\"d\", myLine)\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"blue\");\r\n  }, [data]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Line Chart</h1>\r\n      <svg ref={svgRef} className=\"line-chart\">\r\n        <g className=\"x-axis\" />\r\n        <g className=\"y-axis\" />\r\n      </svg>\r\n      <div className=\"btn-grp\">\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d + 5))}\r\n          title=\"+5\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.filter((d) => d > 50))}\r\n          title=\"filter\"\r\n        />\r\n        <Button\r\n          handleClick={() => setData(data.map((d) => d - 5))}\r\n          title=\"-5\"\r\n        />\r\n        <Button handleClick={() => setData([...data, randNum()])} title=\"Add\" />\r\n        <Button handleClick={() => setData(randArray())} title=\"Re-set\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import BarChart from \"./BarChart\";\r\nimport BarChartPractice from \"./BarChartPractice\";\r\nimport BarChartResp from \"./BarChartResp\";\r\nimport CircleChart from \"./Circle\";\r\nimport LineChart from \"./LineChart\";\r\n\r\n// random number generater\r\nexport const randNum = () => Math.ceil(Math.random() * 100);\r\n\r\n// random array generater\r\nexport const randArray = () => {\r\n  const values = [];\r\n  for (let i = 0; i < 10; i++) {\r\n    values.push(randNum());\r\n  }\r\n\r\n  return values;\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"chart-container\">\r\n        <CircleChart />\r\n        <LineChart />\r\n        <BarChart />\r\n        <BarChartPractice />\r\n      </div>\r\n\r\n      <BarChartResp />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}